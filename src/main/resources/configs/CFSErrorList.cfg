NO_ERROR=0ULL
ERROR_FAILURE=!NO_ERROR
ERROR_INVALID_PARAMETER
ERROR_PARAMETER_OUT_OF_RANGE
ERROR_BAD_BLOCK
ERROR_INVALID_RECIPIENT
ERROR_INVALID_INTERFACE
ERROR_INVALID_ENDPOINT
ERROR_INVALID_ALT_SETTING
ERROR_UNSUPPORTED_REQUEST
ERROR_UNSUPPORTED_CONFIGURATION
ERROR_UNSUPPORTED_FEATURE
ERROR_ENDPOINT_BUSY
ERROR_USB_RESET
ERROR_ABORTED
ERROR_OUT_OF_MEMORY
ERROR_OUT_OF_RESOURCES
ERROR_INVALID_REQUEST
ERROR_NOT_IMPLEMENTED
ERROR_VERSION_NOT_SUPPORTED
ERROR_INVALID_SYNTAX
ERROR_AUTHENTICATION_FAILED
ERROR_UNEXPECTED_RESPONSE
ERROR_UNEXPECTED_VALUE
ERROR_OPEN_FAILED
ERROR_CONNECTION_FAILED
ERROR_CONNECTION_CLOSING
ERROR_CONNECTION_RESET
ERROR_NOT_CONNECTED
ERROR_ALREADY_CLOSED
ERROR_ALREADY_CONNECTED
ERROR_INVALID_SOCKET
ERROR_PROTOCOL_UNREACHABLE
ERROR_PORT_UNREACHABLE
ERROR_INVALID_HEADER
ERROR_WRONG_CHECKSUM
ERROR_WRONG_IDENTIFIER
ERROR_WRONG_CLIENT_ID
ERROR_WRONG_SERVER_ID
ERROR_NO_RESPONSE
ERROR_RECEIVE_QUEUE_FULL
ERROR_TIMEOUT
ERROR_WOULD_BLOCK
ERROR_INVALID_NAME
ERROR_INVALID_OPTION
ERROR_UNEXPECTED_STATE
ERROR_INVALID_ADDRESS
ERROR_INVALID_MESSAGE
ERROR_INVALID_KEY
ERROR_INVALID_KEY_LENGTH
ERROR_INVALID_CHARACTER
ERROR_INVALID_LENGTH
ERROR_INVALID_PADDING
ERROR_INVALID_MAC
ERROR_INVALID_TAG
ERROR_INVALID_TYPE
ERROR_WRONG_ENCODING
ERROR_INVALID_CLASS
ERROR_INVALID_VERSION
ERROR_UNSUPPORTED_TYPE
ERROR_UNSUPPORTED_CIPHER_SUITE
ERROR_UNSUPPORTED_CIPHER_MODE
ERROR_UNSUPPORTED_CIPHER_ALGO
ERROR_UNSUPPORTED_KEY_EXCH_METHOD
ERROR_UNSUPPORTED_SIGNATURE_ALGO
ERROR_INVALID_SIGNATURE_ALGO
ERROR_CERTIFICATE_REQUIRED
ERROR_MESSAGE_TOO_LONG
ERROR_OUT_OF_RANGE
ERROR_MESSAGE_DISCARDED
ERROR_INVALID_PACKET
ERROR_BUFFER_EMPTY
ERROR_INVALID_RESOURCE
ERROR_INVALID_PATH
ERROR_NOT_FOUND
ERROR_ACCESS_DENIED
ERROR_AUTH_REQUIRED
ERROR_NO_RUNNING
ERROR_INVALID_FILE300
ERROR_FILE_NOT_FOUND
ERROR_FILE_OPENING_FAILED
ERROR_FILE_READING_FAILED
ERROR_END_OF_FILE
ERROR_UNEXPECTED_END_OF_FILE
ERROR_UNKNOWN_FILE_FORMAT
ERROR_INVALID_DIRECTORY
ERROR_DIRECTORY_NOT_FOUND
ERROR_FILE_SYSTEM_NOT_SUPPORTED400
ERROR_UNKNOWN_FILE_SYSTEM
ERROR_INVALID_FILE_SYSTEM
ERROR_INVALID_BOOT_SECTOR_SIGNATURE
ERROR_INVALID_SECTOR_SIZE
ERROR_INVALID_CLUSTER_SIZE
ERROR_INVALID_FILE_RECORD_SIZE
ERROR_INVALID_INDEX_BUFFER_SIZE
ERROR_INVALID_VOLUME_DESCRIPTOR_SIGNATURE
ERROR_INVALID_VOLUME_DESCRIPTOR
ERROR_INVALID_FILE_RECORD
ERROR_INVALID_INDEX_BUFFER
ERROR_INVALID_DATA_RUNS
ERROR_WRONG_TAG_IDENTIFIER
ERROR_WRONG_TAG_CHECKSUM
ERROR_WRONG_MAGIC_NUMBER
ERROR_WRONG_SEQUENCE_NUMBER
ERROR_DESCRIPTOR_NOT_FOUND
ERROR_ATTRIBUTE_NOT_FOUND
ERROR_RESIDENT_ATTRIBUTE
ERROR_NOT_RESIDENT_ATTRIBUTE
ERROR_INVALID_SUPER_BLOCK
ERROR_INVALID_SUPER_BLOCK_SIGNATURE
ERROR_INVALID_BLOCK_SIZE
ERROR_UNSUPPORTED_REVISION_LEVEL
ERROR_INVALID_INODE_SIZE
ERROR_INODE_NOT_FOUND
ERROR_UNEXPECTED_MESSAGE500
ERROR_URL_TOO_LONG
ERROR_QUERY_STRING_TOO_LONG
ERROR_NO_ADDRESS
ERROR_NO_BINDING
ERROR_NOT_ON_LINK
ERROR_USE_MULTICAST
ERROR_NAK_RECEIVED
ERROR_INVALID_LEVEL
ERROR_WRONG_STATE
ERROR_END_OF_STREAM
ERROR_LINK_DOWN
ERROR_INVALID_OPTION_LENGTH
ERROR_IN_PROGRESS
ERROR_NO_ACK
ERROR_INVALID_METADATA
ERROR_NOT_CONFIGURED
ERROR_NAME_RESOLUTION_FAILED
ERROR_NO_ROUTE
ERROR_WRITE_FAILED
ERROR_READ_FAILED
ERROR_INVALID_SIGNATURE
ERROR_BAD_RECORD_MAC
ERROR_RECORD_OVERFLOW
ERROR_HANDSHAKE_FAILED
ERROR_NO_CERTIFICATE
ERROR_BAD_CERTIFICATE
ERROR_UNSUPPORTED_CERTIFICATE
ERROR_CERTIFICATE_EXPIRED
ERROR_UNKNOWN_CA
ERROR_DECODING_FAILED
ERROR_DECRYPTION_FAILED
ERROR_ILLEGAL_PARAMETER
ERROR_UNSUPPORTED_EXTENSION
ERROR_MORE_DATA_REQUIRED
ERROR_TLS_NOT_SUPPORTED
ERROR_PRNG_NOT_READY
ERROR_SERVICE_CLOSING
ERROR_INVALID_TIMESTAMP
ERROR_NO_DNS_SERVER
ERROR_NO_MATCH
ERROR_PARTIAL_MATCH
ERROR_SSLBACKEND_NONE
ERROR_SSLBACKEND_OPENSSL
ERROR_SSLBACKEND_GNUTLS
ERROR_SSLBACKEND_NSS
ERROR_SSLBACKEND_OBSOLETE4
ERROR_SSLBACKEND_GSKIT
ERROR_SSLBACKEND_POLARSSL
ERROR_SSLBACKEND_WOLFSSL
ERROR_SSLBACKEND_SCHANNEL
ERROR_SSLBACKEND_DARWINSSL
ERROR_SSLBACKEND_AXTLS
ERROR_SSLBACKEND_MBEDTLS
ERROR_SSL_CONNECT
ERROR_SOFT
ERROR_OPERATING_SYSTEM
ERROR_COM_FACILITY
ERROR_SOFT_FATAL
ERROR_SOFT_RECOVERABLE
ERROR_SOFT_DEBUG
ERROR_BAD_PARAMETER_RECEIVED

STATUS_OK = CFS_SUCCESS,              ///< Operation has completed successfully.
STATUS_FAILURE = 1,                   ///< Operation has failed for some undefined reason.
STATUS_UNIMPLEMENTED = 2,             ///< Given operation has not been implemented.
STATUS_INVALID_ARGUMENT = 3,          ///< An argument to the operation is invalid.
STATUS_INVALID_STATE = 4,             ///< This operation is invalid for the current device state.
STATUS_INVALID_COMMAND = 5,           ///< This command is not recognized.
STATUS_INVALID_INTERFACE = 6,         ///< This interface is not supported.
STATUS_INTERNAL_ERROR = 7,            ///< An internal runtime error has occured.
STATUS_SECURITY_ERROR = 8,            ///< A security/authentication error has occured.
STATUS_PARSE_ERROR = 9,               ///< A error has occured while parsing the command.
STATUS_IN_PROGRESS = 10,              ///< This operation is in progress.
STATUS_NOMEM = 11,                    ///< Operation prevented due to memory pressure.
STATUS_BUSY = 12,                     ///< The device is currently performing a mutually exclusive operation
STATUS_PROP_NOT_FOUND = 13,           ///< The given property is not recognized.
STATUS_DROPPED = 14,                  ///< A/The packet was dropped.
STATUS_EMPTY = 15,                    ///< The result of the operation is empty.
STATUS_CMD_TOO_BIG = 16,              ///< The command was too large to fit in the internal buffer.
STATUS_NO_ACK = 17,                   ///< The packet was not acknowledged.
STATUS_CCA_FAILURE = 18,              ///< The packet was not sent due to a CCA failure.
STATUS_ALREADY = 19,                  ///< The operation is already in progress.
STATUS_ITEM_NOT_FOUND = 20,           ///< The given item could not be found.
STATUS_INVALID_COMMAND_FOR_PROP = 21, ///< The given command cannot be performed on this property.


 @brief Error Code type enum class used to throw a exception with std::make_error_code in case of generic user
 error .

  STATUS_ERR_NULL_POINTER,     ///<  Indicates that a null pointer is detected.
  STATUS_ERR_BAD_PARAMETER,    ///<  Indicates that a wrong parameter has been used in a function call.
  STATUS_ERR_INVALID_INDEX,    ///<  Indicates that an invalid index is detected.
  STATUS_ERR_MEM_ALLOC_FAILED, ///<  Indicates that a memory allocation failed.
  STATUS_ERR_INVALID_HANDLE,   ///<  Indicates that an invalid handle is detected.
  STATUS_ERR_INVALID_THREAD,   ///<  Indicates that an invalid thread is detected.
  STATUS_ERR_INVALID_SEM,      ///<  Indicates that an invalid semaphore is detected.
  STATUS_ERR_INVALID_MSGQ,     ///<  Indicates that an invalid message queue is detected.
  STATUS_ERR_UNKNOWN,          ///<  Indicates that an unknown error is detected.


um class CfeBoardDiagStatus : std::uint32_t

  STATUS_NOT_DETECTED,    ///<  The board is not detected.
  STATUS_BAD_CONF,        ///<  There is an error in the configuration.
  STATUS_NOT_CONFIGURED,  ///<  The board is not configured.
  STATUS_BAD_VOLTAGE,     ///<  Voltage issue on the board.
  STATUS_FAILURE_DETECTED ///<  General error on the board.


 10 // EMERG    0       /* system is unusable. A panic condition was reported to all processes. */
 11 // ALERT    1       /* action must be taken immediately. A condition that should be corrected immediately.
 12 // CRIT     2       /* critical conditions */
 13 // ERR      3       /* error conditions */
 14 // WARNING  4       /* warning conditions */
 15 // NOTICE   5       /* normal but significant condition. A condition requiring special handling.  */
 16 // INFO     6       /* informational */
 17 // DEBUG    7       /* debug-level messages. A message useful for debugging programs.  */
 18
 19 /*
 20  #define LOG_TRACE(message)          LOG4CXX_TRACE(logger, message)
 21  #define LOG_DEBUG(message)          LOG4CXX_DEBUG(logger, message)
 22  #define LOG_INFO(message)           LOG4CXX_INFO(logger, message)
 23  #define LOG_WARNING(message)        LOG4CXX_WARN(logger, message)
 24  #define LOG_ERROR(message)          LOG4CXX_ERROR(logger, message)
 25  #define LOG_FATAL(message)          LOG4CXX_FATAL(logger, message)
 26  #define LOG_ASSERT(cond, message)   LOG4CXX_ASSERT(logger, condition, message)
 27  #define LOG_GLOBAL_CATEGORY(category) private: static const log4cxx::LoggerPtr LOGGER; 
  31 // extern log4cxx::LoggerPtr logger;
 32
 33 // #define LOG_TRACE(x) LOG4CXX_TRACE(logger , x)
 34 // #define LOG_DEBUG(x) LOG4CXX_DEBUG(logger , x)
 35 // #define LOG_INFO(x)  LOG4CXX_INFO(logger , x)
 36 // #define LOG_WARN(x)  LOG4CXX_WARN(logger , x)
 37 // #define LOG_ERROR(x) LOG4CXX_ERROR(logger , x)

            enum class Level : std::uint32_t
            {
                EMERGENCY = (1 << 0),    //<! System is unusable. A panic condition was reported to all processes.
                CRITICAL = (1 << 1),     //<!
                FATAL = (1 << 2),        //<! Critical conditions
                ALERT = (1 << 3),        //<!
                ERROR = (1 << 4),        //<! Action must be taken immediately. A condition that should be corrected immediately.
                WARNING = (1 << 5),      //<! Error conditions
                INFO = (1 << 6),         //<! Warning conditions
                TRACE = (1 << 7),        //<! Informational
                DEBUG = (1 << 8),        //<! Debug-level messages. A message useful for debugging programs.
                ADVISORY = (1 << 9),     //<!
                INHIBIT = (1 << 10),     //<! System is unusable. a Reset is required to recover
                HINDENBUG = (1 << 11),   //<! ... bug with catastrophic behavior
                MANDELBUG = (1 << 12),   //<! ... bug whose causes are so complex it defies repair
                BOHRBUG = (1 << 13),     //<! ... relatively easily detected
                HEISENBUG = (1 << 14),   //<! ... software bug that seems to disappear or alter its behavior when one attempts to study it."*/
                SCHROEDINBUG = (1 << 15) //<! ... bug that manifests itself in running software"
            };
153     enum class Severity : std::uint32_t
154     {
155     |   Heisenbug,    //!< Bug that seems to disappear or alter its behavior when one attempts to study it.
156     |   Hindenbug,    //!< Bug with catastrophic behavior.
157     |   Schroedinbug, //!< Bug that manifests itself in running software.
158     |   Bohrbug,      //!< Bug that do not change its behavior and are relatively easily detected.
159     |   Mandelbug     //!< Bug whose causes are so complex.
160     };
174     enum status
175     {
176     |   STATUS_PENDING  = (1 << 0), /* initial status (written by host)  */
177     |   STATUS_COMPLETE = (1 << 1), /* completion status (written by cp) */
178     |   STATUS_FREE  = (1 << 2),    /* initial status (written by host)  */
179     |   STATUS_ERROR = (1 << 3)     /* completion status (written by cp) */
180     }

    /*!
     * @defgroup CFS_Severity_Status CFS Error severity.
       Severity  Meaning
        00      Informational: This level is used to convey information to the user. No error has occurred.
     * Informational messages are listed only when the FLAG (00) option is specified.
        10      Warning: This level indicates that an error was detected but is not serious enough to interfere with the
     * running of the program.
        20      Error: This level indicates that an error was made, but the compiler is taking a recovery that might
     * yield the desired code.
        30      Severe Error: This level indicates that a serious error was detected. Compilation is completed, but the
     * module object is not created and running of the program cannot be attempted.
        40      Unrecoverable: This level usually indicates a user error that forces termination of processing.
        50      Unrecoverable: This level usually indicates a compiler error that forces termination of processing.
        99      Action: Some manual action is required, such as entering a reply, changing printer forms, or replacing
     * diskettes.
     * @{
     */
    enum class edacSeverity : std::uint32_t
    {
        CFS_SEVERITY_BITMASK = ( 0xC0000000L ),
        CFS_SEVERITY_SUCCESS = ( 0x00000000L ),
        CFS_SEVERITY_NOTICE = ( 0x40000000L ),   /*!< An unusual event has occured, though not an error condition. This
                                                    should be investigated for the root cause. | */
        CFS_SEVERITY_DEBUG = ( 0x40000000L ),    /*!< Useful non-operational messages that can assist in debugging.
                                                    These should not occur during normal operation. | */
        CFS_SEVERITY_INFO = ( 0x40000000L ),     /*!< Normal operational messages. Useful for logging. No action is
                                                    required for these messages. | */
        CFS_SEVERITY_ERROR = ( 0x80000000L ),    /*!< Indicates an error in secondary/redundant systems. | */
        CFS_SEVERITY_WARNING,                    /*!< Indicates about a possible future error if this is not resolved
                                                    within a given timeframe. Example would be a low battery warning. |
                                                  */
        CFS_SEVERITY_ALERT,                      /*!< Action should be taken immediately. Indicates error in
                                                    non-critical systems. | */
        CFS_SEVERITY_CRITICAL = ( 0xC0000000L ), /*!< Action must be taken immediately. Indicates failure in a primary
                                                    system. | */
        CFS_SEVERITY_EMERGENCY,                  /*!< System is unusable. This is a "panic" condition. | */
        CFS_SEVERITY_NONE                        /**< No logging will occur */
    };
    /*!
     * @}
     */

    enum class errc : std::int32_t
    {
        argument_list_too_long = std::int32_t(std::errc::argument_list_too_long),
        argument_out_of_domain = std::int32_t(std::errc::argument_out_of_domain),
        bad_address = std::int32_t(std::errc::bad_address),
        bad_file_descriptor = std::int32_t(std::errc::bad_file_descriptor),
        broken_pipe = std::int32_t(std::errc::broken_pipe),
        device_or_resource_busy = std::int32_t(std::errc::device_or_resource_busy),
        directory_not_empty = std::int32_t(std::errc::directory_not_empty),
        executable_format_error = std::int32_t(std::errc::executable_format_error),
        file_exists = std::int32_t(std::errc::file_exists),
        file_too_large = std::int32_t(std::errc::file_too_large),
        filename_too_long = std::int32_t(std::errc::filename_too_long),
        function_not_supported = std::int32_t(std::errc::function_not_supported),
        illegal_byte_sequence = std::int32_t(std::errc::illegal_byte_sequence),
        inappropriate_io_control_operation = std::int32_t(std::errc::inappropriate_io_control_operation),
        interrupted = std::int32_t(std::errc::interrupted),
        invalid_argument = std::int32_t(std::errc::invalid_argument),
        invalid_seek = std::int32_t(std::errc::invalid_seek),
        io_error = std::int32_t(std::errc::io_error),
        is_a_directory = std::int32_t(std::errc::is_a_directory),
        no_child_process = std::int32_t(std::errc::no_child_process),
        no_lock_available = std::int32_t(std::errc::no_lock_available),
        no_space_on_device = std::int32_t(std::errc::no_space_on_device),
        no_such_device_or_address = std::int32_t(std::errc::no_such_device_or_address),
        no_such_device = std::int32_t(std::errc::no_such_device),
        no_such_file_or_directory = std::int32_t(std::errc::no_such_file_or_directory),
        no_such_process = std::int32_t(std::errc::no_such_process),
        not_a_directory = std::int32_t(std::errc::not_a_directory),
        not_enough_memory = std::int32_t(std::errc::not_enough_memory),
        operation_not_permitted = std::int32_t(std::errc::operation_not_permitted),
        permission_denied = std::int32_t(std::errc::permission_denied),
        read_only_file_system = std::int32_t(std::errc::read_only_file_system),
        resource_deadlock_would_occur = std::int32_t(std::errc::resource_deadlock_would_occur),
        resource_unavailable_try_again = std::int32_t(std::errc::resource_unavailable_try_again),
        result_out_of_range = std::int32_t(std::errc::result_out_of_range),
        too_many_files_open_in_system = std::int32_t(std::errc::too_many_files_open_in_system),
        too_many_files_open = std::int32_t(std::errc::too_many_files_open),
        too_many_links = std::int32_t(std::errc::too_many_links)
    };

    inline std::error_code make_error_code(errc E)
    {
        return std::error_code(static_cast<int>(E), std::generic_category());
    }

namespace std
{
    // Tell the C++ 11 STL metaprogramming that enum edac::errc::edacErrc
    // is registered with the standard error code system
    template <>
    struct is_error_code_enum<cfs::edac::errc>
        : std::true_type
    {
    };
    /*
        template< >
        struct is_error_code_enum< edac::errc::edacErrc >
            : std::true_type
        {
        };

        template< >
        struct is_error_code_enum< edac::errc::edacAppErrc >
            : std::true_type
        {
        };

        template< >
        struct is_error_code_enum< edac::errc::edacSSLErrc >
            : std::true_type
        {
        };
       template<>
       struct is_error_condition_enum<cfs::com::DdsErrs> : std::true_type
       {};
       template <>
       struct is_error_condition_enum<cfs::com::SubsystemError> : std::true_type
       {};
       template <>
       struct is_error_condition_enum<cfs::com::Severity> : std::true_type
       {};
     */
}			